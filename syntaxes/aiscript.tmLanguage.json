{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "AIScript",
    "patterns": [
      {
        "include": "#keywords"
      },
      {
        "include": "#comments"
      },
      {
        "include": "#builtins"
      },
      {
        "include": "#enum-declaration"
      },
      {
        "include": "#class-declaration"
      },
      {
        "include": "#function-declaration"
      },
      {
        "include": "#kwargs"
      },
      {
        "include": "#function-call"
      },
      {
        "include": "#constant-declaration"
      },
      {
        "include": "#dsl-keywords"
      },
      {
        "include": "#routes"
      },
      {
        "include": "#fields"
      },
      {
        "include": "#operators"
      },
      {
        "include": "#directives"
      },
      {
        "include": "#types"
      },
      {
        "include": "#literals"
      },
      {
        "include": "#enum-variants"
      }
    ],
    "repository": {
      "comments": {
        "patterns": [
          {
            "name": "comment.line.double-slash.aiscript",
            "match": "//.*$"
          },
          {
            "name": "comment.block.aiscript",
            "begin": "/\\*",
            "end": "\\*/"
          }
        ]
      },
      "kwargs": {
        "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)=",
        "captures": {
          "1": { "name": "variable.parameter.keyword.aiscript" }
        }
      },
      "class-declaration": {
        "patterns": [
          {
            "match": "\\b(class)\\s+([A-Z][a-zA-Z0-9_]*)\\s*[\\(\\{:]",
            "captures": {
              "1": { "name": "keyword.control.aiscript" },
              "2": { "name": "entity.name.type.class.aiscript" }
            }
          },
          {
            "match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*\\(",
            "captures": {
              "1": { "name": "entity.name.type.class.aiscript" }
            }
          }
        ]
      },
      "enum-declaration": {
        "begin": "\\b(enum)\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\{",
        "beginCaptures": {
          "1": { "name": "keyword.control.aiscript" },
          "2": { "name": "entity.name.type.enum.aiscript" }
        },
        "end": "\\}",
        "patterns": [
          {
            "match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*=",
            "captures": {
              "1": { "name": "entity.name.type.enum.variant.aiscript" }
            }
          }
        ]
      },
      "enum-variants": {
        "patterns": [
          {
            "match": "\\b([A-Z][a-zA-Z0-9_]*)\\!?(::|\\.)([A-Z][a-zA-Z0-9_]*)\\b",
            "captures": {
              "1": { "name": "entity.name.type.enum.aiscript" },
              "2": { "name": "keyword.operator.namespace.aiscript" },
              "3": { "name": "entity.name.type.enum.variant.aiscript" }
            }
          }
        ]
      },
      "constant-declaration": {
        "match": "\\b(const)\\s+([A-Z][A-Z0-9_]*)\\b",
        "captures": {
          "1": { "name": "keyword.control.aiscript" },
          "2": { "name": "variable.other.constant.aiscript" }
        }
      },
      "function-declaration": {
        "patterns": [
          {
            "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
            "captures": {
              "1": { "name": "keyword.control.aiscript" },
              "2": { "name": "entity.name.function.declaration.aiscript" }
            }
          }
        ]
      },
      "function-call": {
        "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
        "captures": {
          "1": { "name": "entity.name.function.call.aiscript" }
        }
      },
      "keywords": {
        "patterns": [{
          "name": "keyword.control.aiscript",
          "match": "\\b(and|break|class|const|continue|else|enum|false|for|fn|if|in|match|nil|not|or|pub|raise|return|super|self|true|let|use|while|ai|embed|prompt|agent)\\b"
        }]
      },
      "dsl-keywords": {
        "patterns": [{
          "name": "keyword.other.aiscript",
          "match": "\\b(route|get|post|put|delete|query|body)\\b"
        }]
      },
      "builtins": {
        "patterns": [{
          "name": "support.function.builtin.aiscript",
          "match": "\\b(abs|len|any|all|min|max|round|sum|input|print|bool|float|int|str|ascii|chr|ord|bin|hex|oct|callable|format)\\b(?=\\s*\\()"
        }]
      },
      "fields": {
        "match": "^\\s*(\\w+):",
        "captures": {
          "1": { "name": "entity.other.attribute-name.aiscript" }
        }
      },
      "operators": {
        "patterns": [
          {
            "name": "keyword.operator.range.aiscript",
            "match": "\\.\\.=?"
          },
          {
            "name": "keyword.operator.arithmetic.aiscript", 
            "match": "\\+|\\-|\\*|\\/|\\%"
          },
          {
            "name": "keyword.operator.assignment.aiscript",
            "match": "="
          },
          {
            "name": "keyword.operator.logical.aiscript",
            "match": "\\!|&&|\\|\\||\\=\\=|\\!\\=|\\>|\\<|\\>\\=|\\<\\="
          },
          {
            "name": "keyword.operator.namespace.aiscript",
            "match": "::"
          },
          {
            "name": "keyword.operator.arrow.aiscript",
            "match": "\\|>|=>"
          },
          {
            "name": "keyword.operator.others.aiscript",
            "match": "\\?|\\|"
          }
        ]
      },
      "literals": {
        "patterns": [
          {
            "name": "string.quoted.double.aiscript",
            "begin": "\"",
            "end": "\"",
            "patterns": [
              {
                "name": "constant.character.escape.aiscript",
                "match": "\\\\."
              }
            ]
          },
          {
            "name": "constant.numeric.aiscript",
            "match": "\\b\\d+(\\.\\d+)?\\b"
          },
          {
            "name": "constant.language.boolean.aiscript",
            "match": "\\b(true|false)\\b"
          }
        ]
      },
      "directive-values": {
        "patterns": [
          {
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
              {
                "include": "#literals"
              },
              {
                "match": ",",
                "name": "punctuation.separator.array.aiscript"
              }
            ]
          },
          {
            "include": "#literals"
          }
        ]
      },
      "directive-arguments": {
        "patterns": [
          {
            "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)",
            "captures": {
              "1": { "name": "variable.parameter.directive.aiscript" },
              "2": { "name": "keyword.operator.assignment.aiscript" }
            }
          },
          {
            "include": "#directive-values"
          },
          {
            "match": ",",
            "name": "punctuation.separator.parameter.aiscript"
          }
        ]
      },
      "directives": {
        "patterns": [
          {
            "begin": "(@)([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
            "beginCaptures": {
              "1": { "name": "keyword.operator.decorator.aiscript" },
              "2": { "name": "entity.name.function.directive.aiscript" }
            },
            "end": "\\)",
            "patterns": [
              {
                "match": "(@)([a-zA-Z_][a-zA-Z0-9_]*)",
                "captures": {
                  "1": { "name": "keyword.operator.decorator.aiscript" },
                  "2": { "name": "entity.name.function.directive.aiscript" }
                }
              },
              {
                "include": "#directives"
              },
              {
                "include": "#directive-arguments"
              }
            ]
          },
          {
            "match": "(@)([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
              "1": { "name": "keyword.operator.decorator.aiscript" },
              "2": { "name": "entity.name.function.directive.aiscript" }
            }
          }
        ]
      },
      "types": {
        "patterns": [{
          "name": "support.type.aiscript",
          "match": "\\b(str|int|bool)\\b"
        },
        {
            "match": "\\b[a-zA-Z][a-zA-Z0-9_]*!",
            "name": "entity.name.type.error.aiscript"
        }]
      },
      "routes": {
        "match": "(/[a-zA-Z0-9_/]*)",
        "name": "entity.name.function.aiscript"
      }
    },
    "scopeName": "source.aiscript"
}